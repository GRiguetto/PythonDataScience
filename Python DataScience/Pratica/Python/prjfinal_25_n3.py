# -*- coding: utf-8 -*-
"""prjFinal_25_n3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wJoOowUDwmmFR3AmXQNl0bX-WiowfpgW
"""

#criar ambiente de sessão spark em memoria
#instalando bibiloteca pyspark
!pip install pyspark

from pyspark.sql import SparkSession as ss
from pyspark.sql import functions as f
from pyspark.sql.types import DoubleType

#criando objeto spark
spark = ss.builder.appName("FILMES").getOrCreate()

#importando dataframe .csv
url= "/content/drive/MyDrive/BasesPark/DataSetsLetterBoxed/cleaned_movies.csv"
filmes = spark.read.csv(
    url,
    sep=",",
    header=True,
    inferSchema=True
)

filmes.show(1000)

url= "/content/drive/MyDrive/BasesPark/DataSetsLetterBoxed/crew.csv"
elenco = spark.read.csv(
    url,
    sep=",",
    header=True,
    inferSchema=True
)

filmes.where("len(minute) >= 4").count()

url= "/content/drive/MyDrive/BasesPark/DataSetsLetterBoxed/genres.csv"
genero = spark.read.csv(
    url,
    sep=",",
    header=True,
    inferSchema=True
)

genero.show()

url= "/content/drive/MyDrive/BasesPark/DataSetsLetterBoxed/releases.csv"
lancamento = spark.read.csv(
    url,
    sep=",",
    header=True,
    inferSchema=True
)

lancamento.show()

url= "/content/drive/MyDrive/BasesPark/DataSetsLetterBoxed/actors.csv"
atores = spark.read.csv(
    url,
    sep=",",
    header=True,
    inferSchema=True
)

atores.show()

filmes.show(1)
atores.show(1)
genero.show(1)
elenco.show(1)
lancamento.show(1)

## renomeando colunas

filmes.withColumnsRenamed({
    "name" : "TITULO",
    "date" : "ANO_LANCAMENTO",
    "minute":"MINUTOS",
    "rating":"NOTA"
}).show()

atores.withColumnsRenamed({
    "name" : "NOME",
    "role" : "PAPEL"
}).show()

genero.withColumnsRenamed({
    "genre" : "GENERO"
}).show()

elenco.withColumnsRenamed({
    "role" : "FUNCAO"
}).show()

lancamento.withColumnsRenamed({
    "contry" : "PAIS",
    "date" : "DATA",
    "type" : "TIPO"
}).show()

filmes = filmes.withColumnsRenamed({
    "name" : "TITULO",
    "date" : "ANO_LANCAMENTO",
    "minute":"MINUTOS",
    "rating":"NOTA"
})

atores = atores.withColumnsRenamed({
    "name" : "NOME",
    "role" : "PAPEL"
})

genero = genero.withColumnsRenamed({
    "genre" : "GENERO"
})

elenco = elenco.withColumnsRenamed({
    "role" : "FUNCAO",
    "name" : "NOME"
})

lancamento = lancamento.withColumnsRenamed({
    "contry" : "PAIS",
    "date" : "DATA",
    "type" : "TIPO"
})

# todos os valores ja convertidos corretamente
# não tem necessidade de uma converção

lancamento.printSchema()

lancamento.show()

lancamento.drop("rating")

#criando as views
filmes.createOrReplaceTempView("v_filme")
atores.createOrReplaceTempView("v_atores")
elenco.createOrReplaceTempView("v_elenco")
lancamento.createOrReplaceTempView("v_lancamento")
genero.createOrReplaceTempView("v_genero")

#consulta qe mostra filmes seus diretores e as notas dos filmes ordenados dos mais bem avaliados
spark.sql(
"""
SELECT
    F.TITULO,
    E.NOME,
    F.NOTA
FROM V_ELENCO E
INNER JOIN V_FILME F ON E.ID = F.ID
WHERE E.FUNCAO = 'Director'
ORDER BY NOTA DESC
"""
).show(15,False)

#mostrar somente os diretores com pelo menos 5 filmes
spark.sql(
"""
SELECT
    E.NOME,
    AVG(F.NOTA) AS MEDIA_DAS_NOTAS
FROM V_ELENCO AS E
INNER JOIN V_FILME AS F ON E.ID = F.ID
WHERE E.FUNCAO = 'Director'
GROUP BY E.NOME
ORDER BY MEDIA_DAS_NOTAS DESC
"""
).show(10)

