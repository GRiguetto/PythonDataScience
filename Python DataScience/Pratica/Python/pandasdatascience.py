# -*- coding: utf-8 -*-
"""PandasDataScience.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151t1a8I9nLzMfkzVumOM0_y__nkl5m8i
"""

#importando biblioteca
import pandas as pd

dados = [
    ["kleber","analista",8000],
    ["ana", "gerente", 25000],
    ["julio", "analista", 3500],
    ["pedro", "estagiario", 1200],
    ["lucia", "analista", 6200],
    ["marcio", "assistente", 2800]
]

colunas = ["funcionario", "funcao", "salario"]

df1 = pd.DataFrame(data=dados, columns= colunas)

df1

dados = [
    ["diego", "estagiario", 1200],
    ["aline", "assistente", 3100],
    ["jonas", "analista", 7800]
]

df2 = pd.DataFrame(dados, columns=colunas)

df2

#unindo dataframe
df = pd.concat([df1, df2], ignore_index=True)

df

#criando uma nova coluna com salario reajustado em 5%
df["cenario1"] = round(df["salario"]*1.05, 2)

df

#crie uma coluna "cenario 2 " com a seguinte regra:
#salrio ate 3500 --> reajuste de 7%
#salario entre 3501 até 5000 ---> reajuste de 5%
#salario acima de 5000 --> reajuste de 3.5%
cenario2 = []
for s in df["salario"]:
    if s <= 3500:
        cenario2.append(round(s * 1.07))
    elif s <= 5000:
        cenario2.append(round(s * 1.05))
    else:
        cenario2.append(round(s * 1.035))

cenario2

df["cenario2"] = cenario2

df

#selecionando algumas coluans:
df[["funcionario","salario"]]

#trazendo valores unicos:
df["funcao"].unique()

# impotando dataset.scv:
url = "/content/drive/MyDrive/BasesPark/moradias_SP.csv"
df = pd.read_csv(url)

df

df.head(1)

#renomeando colunas
df.rename(columns={
    "address":"endereco",
    "district":"bairro",
    "bedrooms": "quartos",
    "garage" : "vagas",
    "type": "tipo",
    "rent": "aluguel"
}, inplace=True)

df.tail()

#quantos quartos temos nas moradias?
df["quartos"].unique()

#verificando tipos das colunas do df pandas
df.info()

#metodos de filtros no pandas
#1º metodo
#devems usar operadores bitwise em filtros padrão pandas
df[(df["quartos"] == 0) & (df["tipo"] != "Studio e kitnet")]

#metido 2
#separamando expressoes booleanas em variaveis
c1 = df["quartos"] == 6
c2 = df["tipo"] == "Casa"
c3 = df["bairro"] == "Vila Mariana"

df[c1 & c2 & c3]

df.query("area >= 120 and area <= 150")

#mostre todas as moradias dos bairros as seguintes palavras
#"Jardi"

df.query("bairro.str.contains('Jardi')")

#pesquise todas as moradias de bairros que comemcem com 'villa'
df.query("bairro.str.startswith('Vila')")

df.query("bairro.str.endswith('ação')")

df.query("bairro.str.contains('Jardi')")

#Normalizando dados Nulos:
df.fillna({
    "area": 0,
    "bairro": "Nao Informado",
    "total":0
},inplace=True)

df.head(3)

#Crie uma coluna chamada 'outras_despesas' com a diferença valor
#total e o valor do aluguel
df["outras_despesas"] = df["total"] - df["aluguel"]

df

#copiandouma coluna para outra
df["total2"] = df["total"]

#removendo uma coluna
#axis = 0 -->  remover as linhas
#axis = 1 --> Remover a coluna inteira
df.drop("total",axis=1,inplace=True)

df.rename(columns={"total2":"total"}, inplace=True)

df

df["outras_despesas"].describe()

#mostre a mediana do valor total por tipode moradio
df.groupby("tipo")["total"].median()

df.groupby("tipo")["total"].mean().sort_values(ascending=False)

df.groupby("tipo")[["total", "outras_despesas"]].mean().sort_values("total",ascending=False)

df.groupby(["tipo","bairro"])[["total", "outras_despesas"]].mean().sort_values("bairro",ascending=False)

#mostre, em ordem decrscente os bairros com media de apartamentos mais caros de são paulo
df.query ("tipo == 'Apartamento'")\
.groupby("bairro")["total"].mean().sort_values(ascending=False)

#mostre a quantidade de moradisas por bairros
#alem do bairro agrupe tambem por tipo de moradia
df.groupby(["bairro", "tipo"])[["total"]].count().sort_values(["bairro","tipo"])

#criando graficos atraz do pandas
df.plot()

df.groupby("tipo")[["total"]].count().sort_values("total")

g2g1 = df.groupby("tipo")["total"].count()

g1.plot(
    kind="pie",
    #"figsize" para mudar o tamanho do grafico
    title="Quantidade de moradias por tipo",
    colormap="Set2",
    ylabel="",
    autopct="%1.1f%%"
)

g2 = df.groupby("tipo")["total"].mean().sort_values()

g2

g2.plot(
    kind="barh",
    colormap="Set2",
    title="Valor medio por Moradia",
    xlabel="Valor médio",
    ylabel="Tipo de moradia",


)

#criando um graffico de dispersão atraves do matplot
#o grafico de dispersão medira a correlação antre duas variaveis.

#verificando correlçao entre valor total e M²

df.query("area >= 50 and area <=100"). groupby("area")[["total"]].mean().sort_values("total")

g3=\
df.query("area >= 50 and area <=100"). groupby("area")[["total"]].mean().sort_values("total")

g3

g3["area"] = g3.index

g3

import matplotlib.pyplot as plt

figura = plt.figure(figsize=(7,5))
eixo = figura.add_axes([0,0,1,1])
eixo.set_title("correlação entre valor médio e M²")
eixo.set_xlabel("M²")
eixo.set_ylabel("Média aluguel")
eixo.scatter(g3["area"], g3["total"])

#criando linha de tendencia, uso da biblioteca numpy
import numpy as np

#Criando coeficientes
coenficientes = np.polyfit(g3["area"], g3["total"], 1)
#criando polynome de 1 dimenção
polinomio = np.poly1d(coenficientes)
#gerando valores para a linahd e tendencia
x = np.linspace(min(g3["area"]), max(g3["area"]), 100)
y = polinomio(x)

# Inserindo linha de tendencia no grfico
eixo.plot(x,y,color="red", lw=1.5, label="Tendência")
eixo.legend()
eixo.plot()

